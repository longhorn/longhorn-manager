/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// DiskStatusApplyConfiguration represents a declarative configuration of the DiskStatus type for use
// with apply.
type DiskStatusApplyConfiguration struct {
	Conditions            []ConditionApplyConfiguration `json:"conditions,omitempty"`
	StorageAvailable      *int64                        `json:"storageAvailable,omitempty"`
	StorageScheduled      *int64                        `json:"storageScheduled,omitempty"`
	StorageMaximum        *int64                        `json:"storageMaximum,omitempty"`
	ScheduledReplica      map[string]int64              `json:"scheduledReplica,omitempty"`
	ScheduledBackingImage map[string]int64              `json:"scheduledBackingImage,omitempty"`
	DiskUUID              *string                       `json:"diskUUID,omitempty"`
	DiskName              *string                       `json:"diskName,omitempty"`
	DiskPath              *string                       `json:"diskPath,omitempty"`
	Type                  *longhornv1beta2.DiskType     `json:"diskType,omitempty"`
	DiskDriver            *longhornv1beta2.DiskDriver   `json:"diskDriver,omitempty"`
	FSType                *string                       `json:"filesystemType,omitempty"`
	InstanceManagerName   *string                       `json:"instanceManagerName,omitempty"`
}

// DiskStatusApplyConfiguration constructs a declarative configuration of the DiskStatus type for use with
// apply.
func DiskStatus() *DiskStatusApplyConfiguration {
	return &DiskStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DiskStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *DiskStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithStorageAvailable sets the StorageAvailable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageAvailable field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageAvailable(value int64) *DiskStatusApplyConfiguration {
	b.StorageAvailable = &value
	return b
}

// WithStorageScheduled sets the StorageScheduled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageScheduled field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageScheduled(value int64) *DiskStatusApplyConfiguration {
	b.StorageScheduled = &value
	return b
}

// WithStorageMaximum sets the StorageMaximum field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageMaximum field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithStorageMaximum(value int64) *DiskStatusApplyConfiguration {
	b.StorageMaximum = &value
	return b
}

// WithScheduledReplica puts the entries into the ScheduledReplica field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ScheduledReplica field,
// overwriting an existing map entries in ScheduledReplica field with the same key.
func (b *DiskStatusApplyConfiguration) WithScheduledReplica(entries map[string]int64) *DiskStatusApplyConfiguration {
	if b.ScheduledReplica == nil && len(entries) > 0 {
		b.ScheduledReplica = make(map[string]int64, len(entries))
	}
	for k, v := range entries {
		b.ScheduledReplica[k] = v
	}
	return b
}

// WithScheduledBackingImage puts the entries into the ScheduledBackingImage field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ScheduledBackingImage field,
// overwriting an existing map entries in ScheduledBackingImage field with the same key.
func (b *DiskStatusApplyConfiguration) WithScheduledBackingImage(entries map[string]int64) *DiskStatusApplyConfiguration {
	if b.ScheduledBackingImage == nil && len(entries) > 0 {
		b.ScheduledBackingImage = make(map[string]int64, len(entries))
	}
	for k, v := range entries {
		b.ScheduledBackingImage[k] = v
	}
	return b
}

// WithDiskUUID sets the DiskUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskUUID field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithDiskUUID(value string) *DiskStatusApplyConfiguration {
	b.DiskUUID = &value
	return b
}

// WithDiskName sets the DiskName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskName field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithDiskName(value string) *DiskStatusApplyConfiguration {
	b.DiskName = &value
	return b
}

// WithDiskPath sets the DiskPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskPath field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithDiskPath(value string) *DiskStatusApplyConfiguration {
	b.DiskPath = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithType(value longhornv1beta2.DiskType) *DiskStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithDiskDriver sets the DiskDriver field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiskDriver field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithDiskDriver(value longhornv1beta2.DiskDriver) *DiskStatusApplyConfiguration {
	b.DiskDriver = &value
	return b
}

// WithFSType sets the FSType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FSType field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithFSType(value string) *DiskStatusApplyConfiguration {
	b.FSType = &value
	return b
}

// WithInstanceManagerName sets the InstanceManagerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceManagerName field is set to the value of the last call.
func (b *DiskStatusApplyConfiguration) WithInstanceManagerName(value string) *DiskStatusApplyConfiguration {
	b.InstanceManagerName = &value
	return b
}
