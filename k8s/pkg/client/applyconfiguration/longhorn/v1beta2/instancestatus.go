/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// InstanceStatusApplyConfiguration represents a declarative configuration of the InstanceStatus type for use
// with apply.
type InstanceStatusApplyConfiguration struct {
	OwnerID             *string                        `json:"ownerID,omitempty"`
	InstanceManagerName *string                        `json:"instanceManagerName,omitempty"`
	CurrentState        *longhornv1beta2.InstanceState `json:"currentState,omitempty"`
	CurrentImage        *string                        `json:"currentImage,omitempty"`
	IP                  *string                        `json:"ip,omitempty"`
	StorageIP           *string                        `json:"storageIP,omitempty"`
	Port                *int                           `json:"port,omitempty"`
	Started             *bool                          `json:"started,omitempty"`
	LogFetched          *bool                          `json:"logFetched,omitempty"`
	SalvageExecuted     *bool                          `json:"salvageExecuted,omitempty"`
	Conditions          []ConditionApplyConfiguration  `json:"conditions,omitempty"`
	UblkID              *int32                         `json:"ublkID,omitempty"`
}

// InstanceStatusApplyConfiguration constructs a declarative configuration of the InstanceStatus type for use with
// apply.
func InstanceStatus() *InstanceStatusApplyConfiguration {
	return &InstanceStatusApplyConfiguration{}
}

// WithOwnerID sets the OwnerID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OwnerID field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithOwnerID(value string) *InstanceStatusApplyConfiguration {
	b.OwnerID = &value
	return b
}

// WithInstanceManagerName sets the InstanceManagerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceManagerName field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithInstanceManagerName(value string) *InstanceStatusApplyConfiguration {
	b.InstanceManagerName = &value
	return b
}

// WithCurrentState sets the CurrentState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentState field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithCurrentState(value longhornv1beta2.InstanceState) *InstanceStatusApplyConfiguration {
	b.CurrentState = &value
	return b
}

// WithCurrentImage sets the CurrentImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentImage field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithCurrentImage(value string) *InstanceStatusApplyConfiguration {
	b.CurrentImage = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithIP(value string) *InstanceStatusApplyConfiguration {
	b.IP = &value
	return b
}

// WithStorageIP sets the StorageIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageIP field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithStorageIP(value string) *InstanceStatusApplyConfiguration {
	b.StorageIP = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithPort(value int) *InstanceStatusApplyConfiguration {
	b.Port = &value
	return b
}

// WithStarted sets the Started field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Started field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithStarted(value bool) *InstanceStatusApplyConfiguration {
	b.Started = &value
	return b
}

// WithLogFetched sets the LogFetched field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogFetched field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithLogFetched(value bool) *InstanceStatusApplyConfiguration {
	b.LogFetched = &value
	return b
}

// WithSalvageExecuted sets the SalvageExecuted field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SalvageExecuted field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithSalvageExecuted(value bool) *InstanceStatusApplyConfiguration {
	b.SalvageExecuted = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *InstanceStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *InstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithUblkID sets the UblkID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UblkID field is set to the value of the last call.
func (b *InstanceStatusApplyConfiguration) WithUblkID(value int32) *InstanceStatusApplyConfiguration {
	b.UblkID = &value
	return b
}
