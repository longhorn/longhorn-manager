/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
)

// InstanceProcessStatusApplyConfiguration represents a declarative configuration of the InstanceProcessStatus type for use
// with apply.
type InstanceProcessStatusApplyConfiguration struct {
	Endpoint        *string                        `json:"endpoint,omitempty"`
	ErrorMsg        *string                        `json:"errorMsg,omitempty"`
	Conditions      map[string]bool                `json:"conditions,omitempty"`
	Listen          *string                        `json:"listen,omitempty"`
	PortEnd         *int32                         `json:"portEnd,omitempty"`
	PortStart       *int32                         `json:"portStart,omitempty"`
	TargetPortEnd   *int32                         `json:"targetPortEnd,omitempty"`
	TargetPortStart *int32                         `json:"targetPortStart,omitempty"`
	State           *longhornv1beta2.InstanceState `json:"state,omitempty"`
	Type            *longhornv1beta2.InstanceType  `json:"type,omitempty"`
	ResourceVersion *int64                         `json:"resourceVersion,omitempty"`
	UblkID          *int32                         `json:"ublkID,omitempty"`
}

// InstanceProcessStatusApplyConfiguration constructs a declarative configuration of the InstanceProcessStatus type for use with
// apply.
func InstanceProcessStatus() *InstanceProcessStatusApplyConfiguration {
	return &InstanceProcessStatusApplyConfiguration{}
}

// WithEndpoint sets the Endpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Endpoint field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithEndpoint(value string) *InstanceProcessStatusApplyConfiguration {
	b.Endpoint = &value
	return b
}

// WithErrorMsg sets the ErrorMsg field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrorMsg field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithErrorMsg(value string) *InstanceProcessStatusApplyConfiguration {
	b.ErrorMsg = &value
	return b
}

// WithConditions puts the entries into the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Conditions field,
// overwriting an existing map entries in Conditions field with the same key.
func (b *InstanceProcessStatusApplyConfiguration) WithConditions(entries map[string]bool) *InstanceProcessStatusApplyConfiguration {
	if b.Conditions == nil && len(entries) > 0 {
		b.Conditions = make(map[string]bool, len(entries))
	}
	for k, v := range entries {
		b.Conditions[k] = v
	}
	return b
}

// WithListen sets the Listen field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Listen field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithListen(value string) *InstanceProcessStatusApplyConfiguration {
	b.Listen = &value
	return b
}

// WithPortEnd sets the PortEnd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortEnd field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithPortEnd(value int32) *InstanceProcessStatusApplyConfiguration {
	b.PortEnd = &value
	return b
}

// WithPortStart sets the PortStart field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortStart field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithPortStart(value int32) *InstanceProcessStatusApplyConfiguration {
	b.PortStart = &value
	return b
}

// WithTargetPortEnd sets the TargetPortEnd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetPortEnd field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithTargetPortEnd(value int32) *InstanceProcessStatusApplyConfiguration {
	b.TargetPortEnd = &value
	return b
}

// WithTargetPortStart sets the TargetPortStart field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetPortStart field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithTargetPortStart(value int32) *InstanceProcessStatusApplyConfiguration {
	b.TargetPortStart = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithState(value longhornv1beta2.InstanceState) *InstanceProcessStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithType(value longhornv1beta2.InstanceType) *InstanceProcessStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithResourceVersion sets the ResourceVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceVersion field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithResourceVersion(value int64) *InstanceProcessStatusApplyConfiguration {
	b.ResourceVersion = &value
	return b
}

// WithUblkID sets the UblkID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UblkID field is set to the value of the last call.
func (b *InstanceProcessStatusApplyConfiguration) WithUblkID(value int32) *InstanceProcessStatusApplyConfiguration {
	b.UblkID = &value
	return b
}
