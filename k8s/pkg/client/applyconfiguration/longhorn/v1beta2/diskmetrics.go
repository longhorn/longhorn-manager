/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// DiskMetricsApplyConfiguration represents a declarative configuration of the DiskMetrics type for use
// with apply.
type DiskMetricsApplyConfiguration struct {
	ReadThroughput  *uint64 `json:"readThroughput,omitempty"`
	WriteThroughput *uint64 `json:"writeThroughput,omitempty"`
	ReadIOPS        *uint64 `json:"readIOPS,omitempty"`
	WriteIOPS       *uint64 `json:"writeIOPS,omitempty"`
	ReadLatency     *uint64 `json:"readLatency,omitempty"`
	WriteLatency    *uint64 `json:"writeLatency,omitempty"`
}

// DiskMetricsApplyConfiguration constructs a declarative configuration of the DiskMetrics type for use with
// apply.
func DiskMetrics() *DiskMetricsApplyConfiguration {
	return &DiskMetricsApplyConfiguration{}
}

// WithReadThroughput sets the ReadThroughput field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadThroughput field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithReadThroughput(value uint64) *DiskMetricsApplyConfiguration {
	b.ReadThroughput = &value
	return b
}

// WithWriteThroughput sets the WriteThroughput field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WriteThroughput field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithWriteThroughput(value uint64) *DiskMetricsApplyConfiguration {
	b.WriteThroughput = &value
	return b
}

// WithReadIOPS sets the ReadIOPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadIOPS field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithReadIOPS(value uint64) *DiskMetricsApplyConfiguration {
	b.ReadIOPS = &value
	return b
}

// WithWriteIOPS sets the WriteIOPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WriteIOPS field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithWriteIOPS(value uint64) *DiskMetricsApplyConfiguration {
	b.WriteIOPS = &value
	return b
}

// WithReadLatency sets the ReadLatency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadLatency field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithReadLatency(value uint64) *DiskMetricsApplyConfiguration {
	b.ReadLatency = &value
	return b
}

// WithWriteLatency sets the WriteLatency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WriteLatency field is set to the value of the last call.
func (b *DiskMetricsApplyConfiguration) WithWriteLatency(value uint64) *DiskMetricsApplyConfiguration {
	b.WriteLatency = &value
	return b
}
