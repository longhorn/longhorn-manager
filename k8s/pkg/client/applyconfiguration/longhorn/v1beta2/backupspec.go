/*
Copyright The Longhorn Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	longhornv1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupSpecApplyConfiguration represents a declarative configuration of the BackupSpec type for use
// with apply.
type BackupSpecApplyConfiguration struct {
	SyncRequestedAt *v1.Time                    `json:"syncRequestedAt,omitempty"`
	SnapshotName    *string                     `json:"snapshotName,omitempty"`
	Labels          map[string]string           `json:"labels,omitempty"`
	BackupMode      *longhornv1beta2.BackupMode `json:"backupMode,omitempty"`
	BackupBlockSize *int64                      `json:"backupBlockSize,omitempty"`
}

// BackupSpecApplyConfiguration constructs a declarative configuration of the BackupSpec type for use with
// apply.
func BackupSpec() *BackupSpecApplyConfiguration {
	return &BackupSpecApplyConfiguration{}
}

// WithSyncRequestedAt sets the SyncRequestedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncRequestedAt field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithSyncRequestedAt(value v1.Time) *BackupSpecApplyConfiguration {
	b.SyncRequestedAt = &value
	return b
}

// WithSnapshotName sets the SnapshotName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SnapshotName field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithSnapshotName(value string) *BackupSpecApplyConfiguration {
	b.SnapshotName = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *BackupSpecApplyConfiguration) WithLabels(entries map[string]string) *BackupSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithBackupMode sets the BackupMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupMode field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithBackupMode(value longhornv1beta2.BackupMode) *BackupSpecApplyConfiguration {
	b.BackupMode = &value
	return b
}

// WithBackupBlockSize sets the BackupBlockSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupBlockSize field is set to the value of the last call.
func (b *BackupSpecApplyConfiguration) WithBackupBlockSize(value int64) *BackupSpecApplyConfiguration {
	b.BackupBlockSize = &value
	return b
}
