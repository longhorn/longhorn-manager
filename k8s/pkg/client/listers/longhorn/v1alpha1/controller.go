/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/rancher/longhorn-manager/k8s/pkg/apis/longhorn/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ControllerLister helps list Controllers.
type ControllerLister interface {
	// List lists all Controllers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Controller, err error)
	// Controllers returns an object that can list and get Controllers.
	Controllers(namespace string) ControllerNamespaceLister
	ControllerListerExpansion
}

// controllerLister implements the ControllerLister interface.
type controllerLister struct {
	indexer cache.Indexer
}

// NewControllerLister returns a new ControllerLister.
func NewControllerLister(indexer cache.Indexer) ControllerLister {
	return &controllerLister{indexer: indexer}
}

// List lists all Controllers in the indexer.
func (s *controllerLister) List(selector labels.Selector) (ret []*v1alpha1.Controller, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Controller))
	})
	return ret, err
}

// Controllers returns an object that can list and get Controllers.
func (s *controllerLister) Controllers(namespace string) ControllerNamespaceLister {
	return controllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ControllerNamespaceLister helps list and get Controllers.
type ControllerNamespaceLister interface {
	// List lists all Controllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Controller, err error)
	// Get retrieves the Controller from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Controller, error)
	ControllerNamespaceListerExpansion
}

// controllerNamespaceLister implements the ControllerNamespaceLister
// interface.
type controllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Controllers in the indexer for a given namespace.
func (s controllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Controller, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Controller))
	})
	return ret, err
}

// Get retrieves the Controller from the indexer for a given namespace and name.
func (s controllerNamespaceLister) Get(name string) (*v1alpha1.Controller, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("controller"), name)
	}
	return obj.(*v1alpha1.Controller), nil
}
