#!/bin/bash
# Notes:
#  - Please install "jq" package before using this driver.
LONGHORN_DEV_PATH="/dev/longhorn/"
LONGHORN_DRIVER_LOG="/var/log/longhorn_driver.log"
LONGHORN_NODEID="/var/lib/rancher/longhorn/.physical_host_uuid"
WAIT_VOLUME_READY_TIMEOUT=120
WAIT_DEVICE_READY_TIMEOUT=120
CURL_TIMEOUT=5
RETRY_INTERVAL=1
RETRY_COUNTS=10
LONGHORN_SVC="127.0.0.1:9500"

usage() {
    err "Invalid usage. Usage: \n"
    err "\t$0 init\n"
    err "\t$0 mount <mount dir>  <json params> \n"
    err "\t$0 unmount <mount dir> \n"
    exit 1
}

debug() {
    if [ -e ${LONGHORN_DRIVER_LOG} ]; then
         echo $(date +'%x %T') $* >> ${LONGHORN_DRIVER_LOG}
    fi
}

err() {
    if [ -e ${LONGHORN_DRIVER_LOG} ]; then
         echo -ne $* 1>&2
         echo $(date +'%x %T') $* >> ${LONGHORN_DRIVER_LOG}
    else
         echo -ne $* 1>&2
    fi
}

log() {
    if [ -e ${LONGHORN_DRIVER_LOG} ]; then
         echo -ne $* >&1
         echo $(date +'%x %T') $* >> ${LONGHORN_DRIVER_LOG}
    else
         echo -ne $* >&1
    fi
}

getExistingVolume() {
    local jsonParams=$1
    local volumeName=$2
    local OUT=$(curl -s --connect-timeout 1 http://${LONGHORN_SVC}/v1/volumes/${volumeName})
    if [ $? -ne 0 ]
    then
        debug "fail to get existing volume info: ${OUT}"
	echo -ne "${OUT}"
	return
    fi
    # wait for volume to be detached
    for i in `seq 1 $RETRY_COUNTS`;
    do
	OUT=$(dealExistedVolume ${jsonParams} ${volumeName})
	if [ "$OUT" != "detaching" ]; then
		break
	fi
	debug "${volumeName} is detaching"
	sleep $RETRY_INTERVAL
    done
    echo -ne "${OUT}"
}

dealExistedVolume() {
    local jsonParams=$1
    local volumeName=$2
    local OUT=$(curl -s --connect-timeout 1 http://${LONGHORN_SVC}/v1/volumes/${volumeName})
    debug "acquire existed volume info: ${OUT}"
    local STATE=$(echo ${OUT} | jq -r '.state')
    if [ "${STATE}" == "detached" ]; then
        echo -ne "Success"
    elif [ "${STATE}" == "detaching" ]; then
	echo -ne "detaching"
    else
        echo -ne "${volumeName} exists but not in a valid state to attach"
    fi
}

createVolume() {
    local jsonParams=$1
    local volumeName=$(echo ${jsonParams} | jq -r '.["kubernetes.io/pvOrVolumeName"]')

    local OUT=$(getExistingVolume ${jsonParams} ${volumeName})
    if [ "${OUT}" == "Success" ]; then
	echo -ne ${OUT}
	return
    fi
    debug "getExistingVolume returns ${OUT}"

    local volumeSize=$(echo ${jsonParams} | jq -r '.size')
    if [ "${volumeSize}" == "null" ]; then
	echo -ne "cannot create volume without size"
	return
    fi

    local numReplicas=$(echo ${jsonParams} | jq -r '.numberOfReplicas')
    numReplicas=${numReplicas:-"3"}
    if [ "${numReplicas}" == "null" ]; then
	numReplicas="3"
    fi
    local staleReplicaTimeout=$(echo ${jsonParams} | jq -r '.staleReplicaTimeout')
    staleReplicaTimeout=${staleReplicaTimeout:-"20"}
    if [ "${staleReplicaTimeout}" == "null" ]; then
	staleReplicaTimeout="20"
    fi
    local fromBackup=$(echo ${jsonParams} | jq -r '.fromBackup')
    if [ "${fromBackup}" == "null" ]; then
	fromBackup=""
    fi

    OUT=$(curl -s -X POST --connect-timeout ${CURL_TIMEOUT} \
              -d '{"name":"'${volumeName}'","size":"'${volumeSize}'","numberOfReplicas":'${numReplicas}',"staleReplicaTimeout":'${staleReplicaTimeout}',"fromBackup":"'${fromBackup}'"}' \
              http://${LONGHORN_SVC}/v1/volumes)
    debug "create volume response from http://${LONGHORN_SVC}/v1/volumes: ${OUT}"
    local TYPE=$(echo ${OUT} | jq -r '.type')
    local STATE=$(echo ${OUT} | jq -r '.state')
    local MESSAGE=$(echo ${OUT} | jq -r '.message')
    if [ "${OUT}" == "" ]; then
	    echo -ne "create volume err: curl timeout"
    elif [ "${TYPE}" == "volume" ]; then
        echo -ne "Success"
    else
        echo -ne "create volume fail: ${MESSAGE}"
    fi
}

detachVolume() {
    local volumeName=$1
    local OUT=$(curl -s -X POST  --connect-timeout ${CURL_TIMEOUT} \
              http://${LONGHORN_SVC}/v1/volumes/${volumeName}?action=detach)
    local ret=$?
    debug "detach volume: ${OUT}"
    if [[ $OUT = *"cannot find volume"* ]];
    then
        debug "cannot find volume ${volumeName}, detach has been done"
        return
    fi
    OUT=$(waitVolumeReady ${volumeName} "detached")
    return
}

attachVolume() {
    local volumeName=$1
    local OUT=$(curl -s -X POST  --connect-timeout ${CURL_TIMEOUT} \
              -d '{"hostId":"'${LONGHORN_NODEID}'"}' \
              http://${LONGHORN_SVC}/v1/volumes/${volumeName}?action=attach)
    local TYPE=$(echo ${OUT} | jq -r '.type')
    local STATE=$(echo ${OUT} | jq -r '.state')
    local MESSAGE=$(echo ${OUT} | jq -r '.message')
    debug "attach volume: ${OUT}"
    if [ "${OUT}" == "" ]; then
        debug "curl timeout: http://${LONGHORN_SVC}/v1/volumes/${volumeName}?action=attach"
        echo -ne "attach volume err: curl timeout"
    elif [ "${TYPE}" == "volume" -a "${STATE}" == "detached" ]; then
        echo -ne "Success"
    else
        echo -ne "attach volume err: ${MESSAGE}"
    fi
}

waitVolumeReady() {
    local volumeName=$1
    local state=$2
    local timeout=${WAIT_VOLUME_READY_TIMEOUT}

    local VOLUME_STATE=""
    until [ "${VOLUME_STATE}" == ${state} ]; do
	v=$(curl -s --connect-timeout 1 http://${LONGHORN_SVC}/v1/volumes/${volumeName})
	if [[ $v = *"cannot find volume"* ]];
	then
		debug "cannot find volume ${volumeName}"
		if [ "${state}" == "detached" ]; then
			# to "Success"
			break
		fi
		echo -ne "volume ${volumeName} no longer exists"
		return
	fi
        VOLUME_STATE=$(echo $v | jq -r '.state')
        ((timeout--))
        if [ ${timeout} -le 0 ]; then
            debug "wait volume ${volumeName} desired ${state} ready timeout:  ${VOLUME_STATE}"
            echo -ne "Wait Volume ${volumeName} ${state} ready timeout"
            return
        fi
        sleep 1
    done
    echo -ne "Success"
    return
}

waitDeviceReady() {
    local blockDevice=$1
    local timeout=${WAIT_DEVICE_READY_TIMEOUT}

    until [ -b "${blockDevice}" ]; do
        ((timeout--))
        if [ ${timeout} -le 0 ]; then
            echo -ne "Wait block device ${blockDevice} timeout"
            return
        fi
        sleep 1
    done
    echo -ne "Success"
    return
}

formatDevIfNeed() {
    local fullDevName=$1
    local newFsType=$2
    local oldFsType
    local OUT

    if [ ! -e ${fullDevName} ]; then
        echo -ne "Device ${fullDevName} is not ready"
        return
    fi

    if OUT=$(blkid ${fullDevName}); then
        oldFsType=$(echo ${OUT} | grep -E -o 'TYPE=\"[[:alnum:]]{1,}\"' | awk -F"\"" '{print $2}')
        debug "dev ${fullDevName} have already fstype ${oldFsType}"
        if [ "${oldFsType}" != "${newFsType}" ]; then
            echo -ne "Failed to create device ${fullDevName} newfs ${newFsType} oldfs ${oldFsType}"
        else
            echo -ne "Success"
        fi
    else
        if ! OUT=$(mkfs -t ${newFsType} ${fullDevName} >/dev/null 2>&1); then
            echo -ne "Failed to create fs ${newFsType} on device ${fullDevName}"
        else
            debug "format fs ${fullDevName} ${newFsType} successfully"
            echo -ne "Success"
        fi
    fi
}

createDevice() {
    local jsonParams=$1
    local volumeName=$(echo ${jsonParams} | jq -r '.["kubernetes.io/pvOrVolumeName"]')
    local fullDevName=${LONGHORN_DEV_PATH}${volumeName}
    local fsType=$(echo ${jsonParams} | jq -r '.["kubernetes.io/fsType"]')
    fsType=${fsType:-"ext4"}

    if [ -e ${fullDevName} ]; then
        echo -ne "Device ${fullDevName} is already existed"
        return
    fi

    local OUT=$(createVolume "${jsonParams}")
    if [ "${OUT}" != "Success" ]; then
        echo -ne ${OUT}
        return
    fi

    OUT=$(waitVolumeReady ${volumeName} "detached")
    if [ "${OUT}" != "Success" ]; then
        echo -ne ${OUT}
        return
    fi

    OUT=$(attachVolume "${volumeName}")
    if [ "${OUT}" != "Success" ]; then
        echo -ne ${OUT}
        return
    fi

    OUT=$(waitVolumeReady ${volumeName} "healthy")
    if [ "${OUT}" != "Success" ]; then
        detachVolume "${volumeName}"
        echo -ne ${OUT}
        return
    fi

    OUT=$(waitDeviceReady ${fullDevName})
    if [ "${OUT}" != "Success" ]; then
        detachVolume "${volumeName}"
        echo -ne ${OUT}
        return
    fi

    OUT=$(formatDevIfNeed ${fullDevName} ${fsType})
    if [ "${OUT}" != "Success" ]; then
        detachVolume "${volumeName}"
        echo -ne ${OUT}
        return
    fi

    echo -ne ${fullDevName}
}

deleteVolume() {
    local volumeName=$1
    local OUT=$(curl -s --connect-timeout ${CURL_TIMEOUT} -X DELETE \
              http://${LONGHORN_SVC}/v1/volumes/${volumeName})
}

deleteDevice() {
    local fullDevName=$1
    local volumeName=${fullDevName#${LONGHORN_DEV_PATH}}
    deleteVolume ${volumeName}

    local timeout=${WAIT_DEVICE_READY_TIMEOUT}
    until [ ! -b "${fullDevName}" ]; do
        ((timeout--))
        if [ ${timeout} -le 0 ]; then
            echo -ne "Volume ${volumeName} detach timeout"
            return
        fi
        sleep 1
    done
}

domount() {
    local mntPath=$1
    local jsonParams=$2
    local volumeName=$(echo ${jsonParams} | jq -r '.["kubernetes.io/pvOrVolumeName"]')
    local fullDevName=${LONGHORN_DEV_PATH}${volumeName}
    local fsType=$(echo ${jsonParams} | jq -r '.["kubernetes.io/fsType"]')

    if [ ! -d "${mntPath}" ]; then
        echo -ne "${mntPath} does not exist"
        return
    fi

    if ! OUT=$(mount "${fullDevName}" "${mntPath}" 2>&1); then
        echo -ne "Failed to mount device ${fullDevName} at ${mntPath}"
        return
    fi
    debug "mount device: ${fullDevName} ${mntPath}" 
    echo -ne "Success"
}

domountdevice() {
    local mntPath=$1
    local jsonParams=$2
    local volumeName=$(echo ${jsonParams} | jq -r '.["kubernetes.io/pvOrVolumeName"]')
    local fullDevName=${LONGHORN_DEV_PATH}${volumeName}

    debug "mount -------begin-------------"
    debug "volume name: ${volumeName}"
    debug "json param: ${jsonParams}"
    debug "mount path: ${mntPath}"

    local OUT=$(createDevice "${jsonParams}")
    if [ "${OUT}" != "${fullDevName}" ]; then
        err "{\"status\": \"Failure\", \"message\": \"${OUT}\"}"
        exit 1
    fi

    OUT=$(domount ${mntPath} "${jsonParams}")
    if [ "${OUT}" != "Success" ]; then
        detachVolume "${volumeName}"
        err "{\"status\": \"Failure\", \"message\": \"${OUT}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\"}"
    exit 0
}

unmountdevice() {
    local mntPath=$1
    local fullDevName=`findmnt -n ${mntPath} | awk 'NR==1{print $2}'`
    local volumeName=${fullDevName#${LONGHORN_DEV_PATH}}

    debug "unmount -------begin-------------"
    debug "mount path: ${mntPath}"
    debug "fullDevName: ${fullDevName}"
    debug "volume name: ${volumeName}"

    local OUT=$(umount "${mntPath}" 2>&1)
    local ret=$?
    debug "umount return ${OUT}"
    if [ $ret -ne 0 ]; then
        if [[ ${OUT} = *"not mounted"* ]]; then
	    debug "not mounted, return"
        elif [[ ${OUT} = *"mountpoint not found"* ]]; then
	    debug "mount point not found, return"
        else
            err "{ \"status\": \"Failure\", \"message\": \"Failed to unmount volume at ${mntPath}\"}"
            exit 1
        fi
    fi
    if [ "${volumeName}" != "" ]; then
        detachVolume "${volumeName}"
    fi
    log "{\"status\": \"Success\"}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
    log "{\"status\": \"Success\", \"capabilities\": {\"attach\": false}}"
    exit 0
fi

if [ $# -lt 1 ]; then
    usage
fi

shift

case "$op" in
    mount)
        domountdevice $*
        ;;
    unmount)
        unmountdevice $*
        ;;
    *)
        log "{ \"status\": \"Not supported\" }"
        exit 0
esac

exit 0
